name: Deploy new version of Capa package

on:
  pull_request:
    branches:
      - main
    types: [closed]
    paths:
      - 'Scripts/**'
      - 'Settings.json'
      - 'kit/**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: CapaServer
    steps:
      - uses: actions/checkout@v4

      - name: Does Settings.json exist?
        run: |
          if (!(Test-Path "Settings.json")) {
            Write-Host "Settings.json does not exist"
            exit 1
          }
          else {
            Write-Host "Settings.json exists"
          }

      - name: Set PowerShell variables
        run: |
          $Settings = Get-Content -Path "Settings.json" | ConvertFrom-Json
          echo "SoftwareName=$($Settings.SoftwareName)" >> $env:GITHUB_ENV
          echo "SoftwareVersion=$($Settings.SoftwareVersion)" >> $env:GITHUB_ENV
          echo "CapaServer=$($Settings.CapaServer)" >> $env:GITHUB_ENV
          echo "SQLServer=$($Settings.SQLServer)" >> $env:GITHUB_ENV
          echo "Database=$($Settings.Database)" >> $env:GITHUB_ENV
          echo "DefaultManagementPoint=$($Settings.DefaultManagementPoint)" >> $env:GITHUB_ENV
          echo "PackageBasePath=$($Settings.PackageBasePath)" >> $env:GITHUB_ENV
          echo "CurrentPackageVersion=$($Settings.OldPackageVersion)" >> $env:GITHUB_ENV
          echo "Description=$($Settings.Description)" >> $env:GITHUB_ENV
          echo "ExportPath=$($Settings.ExportPath)" >> $env:GITHUB_ENV
          echo "NewPackageVersion=$($Settings.PackageVersion)" >> $env:GITHUB_ENV
          echo "PackagePriority=$($Settings.PackagePriority)" >> $env:GITHUB_ENV

          if (([string]::IsNullOrEmpty($Settings.OldSoftwareVersion.SoftwareName)) -eq $false) {
            echo "OldSoftwareName=$($Settings.OldSoftwareVersion.SoftwareName)" >> $env:GITHUB_ENV
            echo "OldSoftwareVersion=$($Settings.OldSoftwareVersion.SoftwareVersion)" >> $env:GITHUB_ENV
            echo "OldPackageVersion=$($Settings.OldSoftwareVersion.PackageVersion)" >> $env:GITHUB_ENV
          }

          $DestinationKitPath = Join-Path (Get-Location).Path "Kit"
          echo "DestinationKitPath=$DestinationKitPath" >> $env:GITHUB_ENV

      - name: Set more variables
        run: |
          $SourceKitPath = Join-Path $env:PackageBasePath ("$env:SoftwareName $env:SoftwareVersion").Trim() "p$env:CurrentPackageVersion" "Kit"
          echo "SourceKitPath=$SourceKitPath" >> $env:GITHUB_ENV

          $DestinationZipPath = Join-Path $env:PackageBasePath ("$env:SoftwareName $env:SoftwareVersion").Trim() "p$env:NewPackageVersion" "Zip"
          echo "DestinationZipPath=$DestinationZipPath" >> $env:GITHUB_ENV

          $DestinationSyncLockPath = Join-Path $env:PackageBasePath ("$env:SoftwareName $env:SoftwareVersion").Trim() "p$env:NewPackageVersion" "sync.lock"
          echo "DestinationSyncLockPath=$DestinationSyncLockPath" >> $env:GITHUB_ENV

          $PackageName = ("$env:SoftwareName $env:SoftwareVersion").Trim()
          echo "PackageName=$PackageName" >> $env:GITHUB_ENV

          if ([string]::IsNullOrEmpty($env:OldSoftwareName) -eq $false) {
            $OldPackageName = ("$env:OldSoftwareName $env:OldSoftwareVersion").Trim()
            echo "OldPackageName=$OldPackageName" >> $env:GITHUB_ENV
          }

      - name: Import kit from current version
        run: |
          if (Test-Path $env:SourceKitPath) {
            Copy-Item -Path "$env:SourceKitPath\*" -Destination $env:DestinationKitPath -Recurse -Force
            Write-Host "Kit imported"
          } else {
            Write-Host "Kit does not exist"
          }

      - name: Run UpdatePackage.ps1
        run: |
          $UpdatePackage = Join-Path (Get-Location).Path "UpdatePackage.ps1"
          if (Test-Path $UpdatePackage) {
            .\UpdatePackage.ps1
          } else {
            Write-Host "UpdatePackage.ps1 does not exist"
            exit 1
          }

      - name: Move package to the same folder as previous version
        run: |
          $oCMS = Initialize-CapaSDK -Server $env:CapaServer -Database $env:Database -InstanceManagementPoint $env:DefaultManagementPoint
          $PckName = $env:PackageName
          $PckCurVersion = "p$env:CurrentPackageVersion"
          $PckNewVersion = "p$env:NewPackageVersion"

          $ExistPackage = Exist-CapaPackage -CapaSDK $oCMS -Name $PckName -Version $PckCurVersion -Type Computer

          if ($ExistPackage -eq $true){
            $Folder = Get-CapaPackageFolder -CapaSDK $oCMS -PackageName $PckName -PackageVersion $PckCurVersion -PackageType Computer

            if (!([string]::IsNullOrEmpty($Folder))) {
              $Splatting = @{
                CapaSDK             = $oCMS
                PackageName     = $PckName
                PackageVersion  = $PckNewVersion
                PackageType       = "Computer"
                FolderStructure = $Folder
                ChangelogText      = "Moved to folder by GitHub Action"
              }
              $bStatus = Set-CapaPackageFolder @Splatting
            } else {
              $bStatus = $true
              Write-Host "No previous folder found, so the package will be created in the default place"
            }
          } else {
            $bStatus = $true
            Write-Host "No previous package found, so the package will be created in the default place"
          }

          if ($bStatus -eq $true){
            Write-Host "Package moved to folder"
          } else {
            Write-Host "Error could not move package to folder"
          }

      - name: Set package Description
        run: |
          $oCMS = Initialize-CapaSDK -Server $env:CapaServer -Database $env:Database -InstanceManagementPoint $env:DefaultManagementPoint
          $PckName = $env:PackageName
          $PckNewVersion = "p$env:NewPackageVersion"

          if ([string]::IsNullOrEmpty($env:Description) -eq $false) {
            $PckDescription = "$env:Description`n`n"
          }

          $PckDescription = $PckDescription + "Package created: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"

          If (Test-Path $env:DestinationKitPath){
            $Files = Get-ChildItem -Path $env:DestinationKitPath -Include ('*.exe','*.msi') -Recurse | Sort-Object LastWriteTime -Descending

            if ($Files.Count -gt 0) {
              $Date = $Files[0].LastWriteTime.ToString('yyyy-MM-dd HH:mm:ss')

              $PckDescription = $PckDescription + "`nInstallation file created: $Date"
            }
          }

          $bStatus = Set-CapaPackageDescription -CapaSDK $oCMS -PackageName $PckName -PackageVersion $PckNewVersion -Description $PckDescription -PackageType 'Computer'

          if ($bStatus -eq $true) {
            Write-Host "Package description updated"
          } else {
            Write-Host "Package description not updated"
            exit 1
          }

      - name: Set package priority
        run: |
          $oCMS = Initialize-CapaSDK -Server $env:CapaServer -Database $env:Database -InstanceManagementPoint $env:DefaultManagementPoint
          $bStatus = Set-CapaPackagePriority -CapaSDK $oCMS -PackageName $env:PackageName -PackageVersion "p$env:NewPackageVersion" -PackageType Computer -Priority $env:PackagePriority

          if ($bStatus -eq $true) {
            Write-Host "Package priority set to $env:PackagePriority"
          } else {
            Write-Host "Failed to set package priority"
            exit 1
          }

      - name: Export package
        run: |
          $oCMS = Initialize-CapaSDK -Server $env:CapaServer -Database $env:Database -InstanceManagementPoint $env:DefaultManagementPoint
          $PckName = $env:PackageName
          $PckNewVersion = "p$env:NewPackageVersion"

          if ([string]::IsNullOrEmpty($env:ExportPath)) {
              $ExportPath = Split-Path $env:PackageBasePath -Qualifier
              $ExportPath = Join-Path $ExportPath "Exportet Packages"
          } else {
              $ExportPath = $env:ExportPath
          }

          if (!(Test-Path $ExportPath)) {
            New-Item -Path $ExportPath -ItemType Directory
          }

          $ExportedFilePath = Join-Path $ExportPath "$($PckName)_$($PckNewVersion).zip"
          Write-Host "Exported package full path: $ExportedFilePath"
          if (Test-Path $ExportedFilePath) {
            Write-Host "Remove file from previous action run"
            Remove-Item -Path $ExportedFilePath -Force
          }

          $KitTemp = Join-Path $env:DestinationZipPath "CapaCapaInstaller_Temp.kit"
          Write-Host "KitTemp: $KitTemp"
          Start-Sleep -Seconds 5
          $Run = $true
          while ($Run) {
            if (Test-Path $KitTemp) {
              Write-Host "KitTemp exists"
              Start-Sleep -Seconds 5
            } elseif (Test-Path $env:DestinationSyncLockPath) {
              Write-Host "Sync.lock exists"
              Start-Sleep -Seconds 5
            } else {
              Write-Host "No lock files found"
              $Run = $false
            }
          }

          $bStatus = Export-CapaPackage -CapaSDK $oCMS -PackageName $PckName -PackageVersion $PckNewVersion -PackageType Computer -ToFolder $ExportPath
          if ($bStatus) {
            Write-Host "Package exported successfully to $ExportPath"
          } else {
            Write-Host "Package export failed"
            exit 1
          }

      - name: Promote package
        run: |
          $oCMS = Initialize-CapaSDK -Server $env:CapaServer -Database $env:Database -InstanceManagementPoint $env:DefaultManagementPoint
          $PckName = $env:PackageName
          $PckNewVersion = "p$env:NewPackageVersion"

          $bStatus =  Initialize-CapaPackagePromote -CapaSDK $oCMS -PackageName $PckName -PackageVersion $PckNewVersion -PackageType Computer
          if ($bStatus) {
              Write-Host "Package $PckName $PckNewVersion promoted successfully"
          }
          else {
              Write-Host "Package $PckName $PckNewVersion promotion failed"
              exit 1
          }

      - name: If minor version the set units from old version to be installed on the new version
        run: |
          $MinorScript = Join-Path (Get-Location).Path "MinorVersionSetSameStatus.ps1"

          if ($env:GITHUB_HEAD_REF -notlike "*Major"){
            if (Test-Path $MinorScript) {
              .\MinorVersionSetSameStatus.ps1
            } else {
              Write-Host "MinorVersionSetSameStatus.ps1 does not exist"
            }
          }


      - name: Copy relations
        run: |
          $CopyRelationFailed = $false
          $oCMS = Initialize-CapaSDK -Server $env:CapaServer -Database $env:Database
          $ManagementPoints = Get-CapaManagementPoint -CapaSDK $oCMS

          foreach ($ManagementPoint in $ManagementPoints) {
            Write-Host "Running for Managemnet Point: $($ManagementPoint.Name)"
            $CurrenCMS = Initialize-CapaSDK -Server $env:CapaServer -Database $env:Database -InstanceManagementPoint $ManagementPoint.Id

            $ExistNewPck = Exist-CapaPackage -CapaSDK $oCMS -Name $env:PackageName -Version "p$env:NewPackageVersion" -Type Computer
            if ($ExistNewPck -eq $false) {
              Write-Host "Package does not exist on Management Point: $($ManagementPoint.Name)"
              continue
            }

            $ExistOldPck = Exist-CapaPackage -CapaSDK $oCMS -Name $env:PackageName -Version "p$($env:CurrentPackageVersion)" -Type Computer
            if ($ExistOldPck) {
              Write-Host 'Copy relations from old package version to new package version'

              $Splatting = @{
                CapaSDK                                 = $CurrenCMS
                FromPackageName                         = $env:PackageName
                FromPackageVersion                      = "p$env:CurrentPackageVersion"
                FromPackageType                         = 'Computer'
                ToPackageName                           = $env:PackageName
                ToPackageVersion                        = "p$env:CurrentPackageVersion"
                ToPackageType                           = 'Computer'
                CopyGroups                              = $true
                CopyUnits                               = $true
                UnlinkGroupsAndUnitsFromExistingPackage = $true
                DisableScheduleOnExistingPackage        = $true
                CopySchedule                            = $true
              }
              $bStatus = Copy-CapaPackageRelation @Splatting
              if ($bStatus -eq $false) {
                $CopyRelationFailed = $true
                Write-Host "Failed to copy relations for Management Point: $($ManagementPoint.Name)"
              }
            } else {
              Write-Host "Old package version does not exist on Management Point: $($ManagementPoint.Name)"
            }

            if ([string]::IsNullOrEmpty($env:OldPackageName)) {
              continue
            }

            $ExistOldSoftVer = Exist-CapaSoftwareVersion -CapaSDK $oCMS -Name $env:OldPackageName -Version "p$(env:OldPackageVersion)" -Type Computer
            if ($ExistOldSoftVer) {
              Write-Host 'Copy relations from old software version to new software version'

              $Splatting = @{
                CapaSDK                                 = $CurrenCMS
                FromSoftwareName                        = $env:OldPackageName
                FromSoftwareVersion                     = "p$($env:OldPackageVersion)"
                FromSoftwareType                        = 'Computer'
                ToSoftwareName                          = $env:PackageName
                ToSoftwareVersion                       = "p$env:NewPackageVersion"
                ToSoftwareType                          = 'Computer'
                CopyGroups                              = $true
                CopyUnits                               = $true
                UnlinkGroupsAndUnitsFromExistingPackage = $true
                DisableScheduleOnExistingPackage        = $true
                CopySchedule                            = $true
              }
              $bStatus = Copy-CapaPackageRelation @Splatting
              if ($bStatus -eq $false) {
                $CopyRelationFailed = $true
                Write-Host "Failed to copy relations for Management Point: $($ManagementPoint.Name)"
              }
            } else {
              Write-Host "Old software version does not exist on Management Point: $($ManagementPoint.Name)"
            }
          }

          if ($CopyRelationFailed) {
            Write-Host 'Failed to copy relations, try doing it manually or try again'
            exit 1
          }

      - name: Delete old package version
        run: |
          $oCMS = Initialize-CapaSDK -Server $env:CapaServer -Database $env:Database
          $ManagementPoints = Get-CapaManagementPoint -CapaSDK $oCMS

          $firstElement = $ManagementPoints | Where-Object { $_.ParentGUID -ne $null -and ($_.GUID -notin $ManagementPoints.ParentGUID) }
          $lastElements = $ManagementPoints | Where-Object { $_.ParentGUID -eq $null }
          $middleElements = $ManagementPoints | Where-Object { $_ -ne $firstElement -and $_ -ne $lastElements }
          $sortedManagementPoints = $firstElement + $middleElements + $lastElements

          foreach ($ManagementPoint in $sortedManagementPoints) {
            Write-Host "Running for Managemnet Point: $($ManagementPoint.Name)"
            $CurrenCMS = Initialize-CapaSDK -Server $env:CapaServer -Database $env:Database -InstanceManagementPoint $ManagementPoint.Id

            $ExistNewPck = Exist-CapaPackage -CapaSDK $oCMS -Name $env:PackageName -Version "p$env:NewPackageVersion" -Type Computer
            if ($ExistNewPck -eq $false) {
              Write-Host "Package does not exist on Management Point: $($ManagementPoint.Name)"
              continue
            }

            $ExistOldPck = Exist-CapaPackage -CapaSDK $oCMS -Name $env:PackageName -Version "p$($env:CurrentPackageVersion)" -Type Computer
            if ($ExistOldPck) {
              $bStatus = Remove-CapaPackage -CapaSDK $CurrenCMS -PackageName $env:PackageName -PackageVersion "p$($env:CurrentPackageVersion)" -PackageType Computer -Force
              if ($bStatus) {
                Write-Host "Package $($env:PackageName) version $($env:CurrentPackageVersion) removed successfully"
              } else {
                Write-Error "Error: Failed to remove package $($env:PackageName) version $($env:CurrentPackageVersion)"
                exit 1
              }
            }

            if ([string]::IsNullOrEmpty($env:OldPackageName)){
              continue
            }

            $ExistOldSoftVer = Exist-CapaSoftwareVersion -CapaSDK $oCMS -Name $env:OldPackageName -Version "p$(env:OldPackageVersion)" -Type Computer
            if ($ExistOldSoftVer) {
              $bStatus = Remove-CapaSoftwareVersion -CapaSDK $CurrenCMS -Name $env:OldPackageName -Version "p$(env:OldPackageVersion)" -Type Computer -Force
              if ($bStatus) {
                Write-Host "Software Version $($env:OldPackageName) version $($env:OldPackageVersion) removed successfully"
              } else {
                Write-Error "Error: Failed to remove software version $($env:OldPackageName) version $($env:OldPackageVersion)"
                exit 1
              }
            }
          }
